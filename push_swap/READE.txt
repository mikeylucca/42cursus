# Push Swap Project

## Overview
This project implements the "Push Swap" algorithm, which sorts a stack of integers using a limited set of operations. The operations include swapping, pushing, and rotating elements between two stacks (`stack_a` and `stack_b`).

## Function Mindmap

### algorithm.c
- `resolve_num`: Resolves the position of a number in `stack_a` relative to `stack_b` and performs necessary rotations.
- `resolve_coherences`: Adjusts the stacks based on coherence distance.

### algorithm_helper.c
- `get_coherences`: Calculates the distance between elements in `stack_a` and `stack_b` to determine coherence.
- `ft_double_shift`: Performs a double shift operation on two stacks.

### error_handler.c
- `print_error`: Prints an error message and exits the program.
- `validate_input`: Validates the input arguments to ensure they are integers and within the allowed range.

### operations.c
- `sa`, `sb`, `ss`: Swap the first two elements of `stack_a`, `stack_b`, or both.
- `pa`, `pb`: Push the top element from one stack to another.
- `ra`, `rb`, `rr`: Rotate `stack_a`, `stack_b`, or both upwards.
- `rra`, `rrb`, `rrr`: Rotate `stack_a`, `stack_b`, or both downwards.

### push_swap.c
- `main`: Entry point of the program. Parses input, validates it, and initiates the sorting process.
- `initialize_stacks`: Initializes `stack_a` and `stack_b` with the input values.

### utils.c
- `ft_double_shift`: Performs a double shift operation on two stacks.
- `r_top`: Rotates a stack to bring a specific index to the top.

### utils_stack.c
- `get_start_stack`: Retrieves the starting index of a stack.
- `get_end_stack`: Retrieves the ending index of a stack.
- `get_min_stack`: Finds the minimum value in a stack.
- `get_max_stack`: Finds the maximum value in a stack.
- `get_min_above_tresh`: Finds the smallest value in a stack above a given threshold.

## Key Questions and Answers

1. **What is the purpose of the project?**
   The project implements the "Push Swap" algorithm to sort a stack of integers using a limited set of operations.

2. **How does the project handle input validation?**
   Input validation is handled by `validate_input`, which ensures all inputs are integers and within the allowed range.

3. **What is the role of `resolve_num`?**
   It determines the correct position of a number in `stack_a` relative to `stack_b` and performs rotations to align the stacks.

4. **How are rotations implemented?**
   Rotations are implemented using `ra`, `rb`, `rr` (upward) and `rra`, `rrb`, `rrr` (downward) functions.

5. **What are the key utility functions?**
   - `get_start_stack` and `get_end_stack` for stack boundaries.
   - `get_min_stack` and `get_max_stack` for extremum values.
   - `get_min_above_tresh` for threshold-based value retrieval.

## How to Use
1. Compile the project using the provided `Makefile`.
2. Run the executable with a list of integers as arguments.
3. The program outputs the sequence of operations to sort the integers.

## Notes
- Ensure the input integers are valid and within the expected range.
- The project is optimized for performance with minimal operations.